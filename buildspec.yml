version: 0.2

phases:
  pre_build:
    commands:
      - echo "Downloading .env from S3..."
      - aws s3 cp s3://temporary-bucket-gitlab/.env .env
      - echo ".env file downloaded:"
      - cat .env
      - echo "Replacing placeholders in .env..."
      - sed -i "s|{{AWS_SECRET_KEY}}|${AWS_SECRET_KEY}|g; s|{{AWS_ACCESS_KEY}}|${AWS_ACCESS_KEY}|g; s|{{S3_PATH}}|${S3_PATH}|g; s|{{S3_BUCKET_NAME}}|${S3_BUCKET_NAME}|g; s|{{DEFAULT_PASSWORD}}|${DEFAULT_PASSWORD}|g; s|{{ZIPCODE_API_KEY}}|${ZIPCODE_API_KEY}|g; s|{{AWS_CLOUDWATCH_SECRET_KEY}}|${AWS_CLOUDWATCH_SECRET_KEY}|g; s|{{AWS_CLOUDWATCH_ACCESS_KEY}}|${AWS_CLOUDWATCH_ACCESS_KEY}|g; s|{{AWS_GROUP_NAME}}|${AWS_GROUP_NAME}|g; s|{{AWS_LOGS_STREAM_NAME}}|${AWS_LOGS_STREAM_NAME}|g; s|{{SQL_HOST}}|${SQL_HOST}|g; s|{{SQL_PASSWORD}}|${SQL_PASSWORD}|g; s|{{LOGIN_SECRET}}|${LOGIN_SECRET}|g; s|{{REFRESH_SECRET}}|${REFRESH_SECRET}|g; s|{{PAGEPROOF_SUBKEY}}|${PAGEPROOF_SUBKEY}|g; s|{{PAGEPROOF_USERNAME}}|${PAGEPROOF_USERNAME}|g; s|{{PAGEPROOF_PASSWORD}}|${PAGEPROOF_PASSWORD}|g; s|{{PAGEPROOF_IFRAMEURL}}|${PAGEPROOF_IFRAMEURL}|g; s|{{CRYPTO_SECRET_KEY}}|${CRYPTO_SECRET_KEY}|g; s|{{AWS_TEXTRACT_ACCESS_KEY}}|${AWS_TEXTRACT_ACCESS_KEY}|g; s|{{AWS_TEXTRACT_SECRET_KEY}}|${AWS_TEXTRACT_SECRET_KEY}|g;" .env
      - mkdir -p uploads
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 937378413704.dkr.ecr.ap-southeast-1.amazonaws.com
      - REPOSITORY_URI=937378413704.dkr.ecr.ap-southeast-1.amazonaws.com/eks-common-services-api

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t eks-common-services-api.
      - docker tag eks-common-services-api:latest public.ecr.aws/t7g3t1i4/eks-common-services-api:latest

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push public.ecr.aws/t7g3t1i4/eks-common-services-api:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - printf '[{"name":"%s","imageUri":"%s"}]' eks-common-services-api public.ecr.aws/t7g3t1i4/eks-common-services-api> imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files: imagedefinitions.json
